apply plugin: 'com.android.application'

/**
 * gradle projectReport
 * build/reports/project/dependencies/index.html
 *
 * gradle -q dependencies app:dependencies --configuration compile*/
//apply plugin: 'project-report'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

repositories {
    //    maven { url 'http://uk.maven.org/maven2' }
    //    maven { url 'https://raw.githubusercontent.com/umeng/mvn-repo-umeng/master/repository' }
    jcenter()
    mavenCentral()
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        applicationId "com.camnter.newlife"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // debug的签名
        debug {
            storeFile file("../camnter.jks")
            storePassword "123456"
            keyAlias "camnter"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            println("====== buildTypes.release ======")
            //            minifyEnabled true
            //            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [DEBUG: "release"]
        }
        debug {
            println("====== buildTypes.debug ======")
            signingConfig signingConfigs.debug
            manifestPlaceholders = [DEBUG: "debug"]

            // app-debug-androidTest-unaligned.apk
            /**
             * 作为 Android 插件 3.0 迁移指南建议
             *
             * 使用 all() 而不是 each()
             * 使用 outputFileName 而不是 output.outputFile 如果你只更改文件名（就是你的情况）
             *
             * If you use each() to iterate through the variant objects,
             * you need to start using all(). That's because each() iterates
             * through only the objects that already exist during configuration time—
             * but those object don't exist at configuration time with the new model.
             * However, all() adapts to the new model by picking up object as they are
             * added during execution.*/
            //            android.applicationVariants.all { variant ->
            //                variant.outputs.all {
            //                    def fileName = "app-debug-androidTest-unaligned.apk"
            //                    println("====== buildTypes.output ======")
            //                    println("AppName: " + fileName)
            //                    outputFileName = fileName
            //                }
            //            }
        }
    }

    //    // 渠道Flavors
    //    productFlavors {
    //        github {
    //            applicationId "com.camnter.newlife"
    //            manifestPlaceholders = [DEBUG: "debug"]
    //        }
    //    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        resultsDir = "${project.buildDir}/life/results"
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ['libs']
        }
    }

    dataBinding {
        enabled = true
    }

    /**
     * 修复 INSTALL_FAILED_NO_MATCHING_ABIS 问题
     * 不过是针对 模拟器 的临时花操作*/
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', "armeabi", "arm64-v8a"
            universalApk true
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    testApi rootProject.ext.denpendencies["junit"]
    // 如果要使用 Mockito，你需要添加此条依赖库
    testApi rootProject.ext.denpendencies["mockito-core"]
    // 如果你要使用 Mockito 用于 Android instrumentation tests，那么需要你添加以下三条依赖库
    androidTestApi rootProject.ext.denpendencies["mockito-core"]
    androidTestApi rootProject.ext.denpendencies["dexmaker"]
    androidTestApi rootProject.ext.denpendencies["dexmaker-mockito"]
    androidTestApi(rootProject.ext.denpendencies["espresso-core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.google.code.findbugs'
    })

    // Google
    api rootProject.ext.denpendencies["support-v4"]
    api rootProject.ext.denpendencies["support-v7"]
    api rootProject.ext.denpendencies["recyclerview-v7"]
    api rootProject.ext.denpendencies["design"]
    api rootProject.ext.denpendencies["gson"]
    api rootProject.ext.denpendencies["guava"]
    // camnter
    api rootProject.ext.denpendencies["easyslidingtabs"]
    api rootProject.ext.denpendencies["easyrecyclerview"]
    api rootProject.ext.denpendencies["easyarcloading"]
    api rootProject.ext.denpendencies["easylikearea"]
    api rootProject.ext.denpendencies["easyrecyclerviewsidebar"]
    // ReactiveX
    api rootProject.ext.denpendencies["rxandroid2"]
    api rootProject.ext.denpendencies["rxjava2"]
    // Square
    api rootProject.ext.denpendencies["retrofit"]
    api rootProject.ext.denpendencies["picasso"]
    // Alibaba
    api rootProject.ext.denpendencies["fastjson"]
    // Glide
    api rootProject.ext.denpendencies["glide"]

    // databinding
    annotationProcessor rootProject.ext.annotationProcessor["databinding-compiler"]
    // butterknife
    api rootProject.ext.denpendencies["butterknife"]
    annotationProcessor rootProject.ext.annotationProcessor["butterknife-compiler"]

    api group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

    api project(':otto')
    api project(':volley')
    api project(':agera-1.0.0')
    api project(':stackblur')
    api project(':rxjava2')
    // api project(':databinding')
    // api project(':databinding-rxjava')
    api project(':widget')
    api project(':utils')
    api project(':smartsave')
    api project(':annotation-processor-annotation')
    api project(':smartrouter')
    api project(':plugin-life:load-simple-plugin:load-simple-plugin-host')

    testApi project(':utils')

    // annotation-processor-compiler
    annotationProcessor project(':annotation-processor-compiler')
    // smartsave-compiler
    annotationProcessor project(':smartsave-compiler')
    // smartrouter-compiler
    annotationProcessor project(':smartrouter-compiler')
}

task nativeLibsToJar(type: Zip, description: 'create a jar archive of the native libs') {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    from fileTree(dir: 'renderscript', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        // local repository
        maven { url uri('../gradle-plugin-life/repository') }
    }
    dependencies {
        // local repository
        classpath 'com.camnter.gradle.plugin:life-plugin:1.0.3'
        classpath 'com.camnter.gradle.plugin:life-javassist-plugin:1.0.0'
        classpath 'com.camnter.gradle.plugin:life-asm-plugin:1.0.0'
    }
}

configurations.all {
    resolutionStrategy {
        force rootProject.ext.denpendencies["support-v4"]
        force rootProject.ext.denpendencies["support-v7"]
    }
}


/***************
 * Life plugin *
 ***************/

// apply plugin: 'com.camnter.gradle.plugin.life'

//lifeExtension {
//    id = "[App Module]   [CaMnter]"
//    save = "[App Module]   [Save you from anything]"
//    //    nestLifeExtension {
//    //        home = "[App Module]   [https://camnter.com]"
//    //        email = "[App Module]   [yuanyu.camnter@gmail.com]"
//    //    }
//}

/******************
 * ToyTime plugin *
 ******************/

apply plugin: 'com.camnter.gradle.plugin.toytime'

toyTimeExtension {
    keyword = ''
    minElapsedMillis = 10
}

/*************
 * R2 plugin *
 *************/

//apply plugin: 'com.camnter.gradle.plugin.r2'

/****************
 * Method trace *
 ****************/

apply plugin: 'com.camnter.gradle.plugin.method.trace'

methodTraceExtension {
    packageName = 'com.camnter'
}

/*************************
 * Resources size plugin *
 *************************/

apply plugin: 'com.camnter.gradle.plugin.resources.size'

resourcesSizeExtension {
    debugAble = true
    // default 100 kb
    maxSize = 50
}

/*************************
 * Resources optimize l2 *
 *************************/

//apply plugin: 'com.camnter.gradle.plugin.resources.optimize.l2'
//
//// sample
//resourcesOptimizeL2Extension {
//    webpConvert = false
//    debugResourcesOptimize = true
//    // 100 kb
//    maxSize = 50
//    cwebpPath = ''
//    guetzliPath = ''
//    pngquantPath = ''
//}

/*********************
 * Dex method counts *
 *********************/

//apply plugin: 'com.camnter.gradle.plugin.dex.method.counts'
//
//dexMethodCountsExtension {
//    countFields = false
//    includeClasses = false
//    printAble = true
//    packageFilter = ""
//}

/******************
 * Life javassist *
 ******************/

// apply plugin: 'com.camnter.gradle.plugin.life.javassist'

//lifeJavassistExtension {
//    sign = 'Save you from anything'
//}

apply plugin: 'com.camnter.gradle.plugin.life.asm'