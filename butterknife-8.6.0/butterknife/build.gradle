apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion

        consumerProguardFiles 'proguard-rules.txt'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }
}

dependencies {
    api project(':butterknife-8.6.0:butterknife-annotations')
    api 'com.android.support:support-annotations:25.3.0'
    api 'com.android.support:support-compat:25.3.0'

    androidTestApi 'junit:junit:4.12'
    androidTestApi 'com.google.truth:truth:0.34'
    androidTestApi 'com.android.support.test:runner:0.5'

    testApi 'junit:junit:4.12'
    testApi 'com.google.truth:truth:0.34'
    testApi 'com.google.testing.compile:compile-testing:0.11'
    testApi files(getRuntimeJar())
    testApi files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
    testApi project(':butterknife-8.6.0:butterknife-compiler')
}

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

//
//apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
